f(m)
make.matrix<-function(){
a<-0
print(a)
function(x) {
a<<- solve(x)
a
}
}
f <- make.matrix()
f(m)
f(m)
make.matrix<-function(){
a<-0
print(a)
function(x) {
if(!is.null(a)) {
message("getting cached data")
return(a)
}
a<<- solve(x)
a
}
}
f(m)
f(m)
f <- make.matrix()
f(m)
f(m)
f(m)
make.matrix<-function(){
a<-0
print(a)
function(x) {
if(!is.null(a)) {
message("getting cached data")
return(a)
} else {
a<<- solve(x)
a }
}
}
f(m)
f(m)
f(1)
a
a<- 0
f(m)
a
a <- "NA"
f(m)
f(m)
make.matrix<-function(){
a<-0
print(a)
function(x) {
#                 if(!is.null(a)) {
#                         message("getting cached data")
#                         return(a)
#                 } else {
a<<- solve(x)
a
#                }
}
}
f <- make.matrix()
f(m)
a
ls(environment(f))
ls(environment())
rm(a)
ls(environment())
ls(environment(makeVector))
make <- makeVector()
ls(environment(make))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
make <- makeVector()
ls(environment(make))
make.matrix<-function( y = matrix()){
a<-0
print(a)
function(x) {
#                 if(!is.null(a)) {
#                         message("getting cached data")
#                         return(a)
#                 } else {
a<<- solve(x)
a
#                }
}
}
f <- make.matrix()
f(m)
ls(environment(f))
get("a", environment(f))
get("y", environment(f))
get(, environment(f))
ls(environment(f))
get("y", environment(f))
make.matrix<-function( y = matrix()){
a<-0
print(a)
a <- function(x) {
#                 if(!is.null(a)) {
#                         message("getting cached data")
#                         return(a)
#                 } else {
a<<- solve(x)
#                }
}
}
ls(environment(f))
get("a", environment(f))
f(m)
get("a", environment(f))
make.matrix<-function( y = matrix()){
a<-0
print(a)
function(x) {
#                 if(!is.null(a)) {
#                         message("getting cached data")
#                         return(a)
#                 } else {
a<<- solve(x)
a
#                }
}
}
makeVector()
ls()
y
makeVector(y)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
list <- makeVector()
list(1:10)
list
list(1:10)
list(1:9)
list(1)
list
ls(environment(list))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
z <- cachemena()
z <- cachemean()
z <- cachemean(1)
z <- cachemean(1:10)
x <- 1:10000
vec<-makeVector(x)
str(vec)
vec$getmean
vec$set
vec$set(1:10)
x
vec$set
m
rm m
rm(m)
x <- 1:10000
x <- 1:20000
x
vec<-makeVector(x)
str(vec)
vec$setmean(x)
m
str(vec$setmean(x))
vec$setmean(x)
vec(x)
str(vec)
vec$getmean()
vec$getmean()
rm()
ls
Ls()
ls()
vec$getmean()
x <- 1:10000
vec<-makeVector(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
vec<-makeVector(x)
ls(environment(vec))
ls(environment(makeVector))
Ls()
ls()
makeVector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
vec<-makeVector(x)
makeVector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn<- function() environment()
list(set = set, get = get,
setmean = setmean,
getmean = getmean,
getevn = getevn)
}
vec<-makeVector(x)
vec$getmean()
mx <- mean(x)
vec$setmean(mx)
vec$getmean()
vec$getevn()
ls(vec$getevn())
parent.env(vec$getevn())
ls(parent.env(vec$getevn()))
parent.env(vec$getevn())$m
y <- 1:10
vec$set(y)
vec$get(y)
vec<-makeVector(y)
vec$getmean()
parent.env(vec$getevn())$m
vec$setmean(mean(y))
vec$getmean()
parent.env(vec$getevn())$m
vec$setmean(mean(1:20))
parent.env(vec$getevn())$m
vec$getmean()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
matrix <- makeCacheMatrix()
z <- matrix(1:4, nrow = 2 , ncol = 2)
z
mat <- makeCacheMatrix(z)
z
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
getevn<- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
##
mat <- makeCacheMatrix(z)
mat
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
mat_inv <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
mat_inv <<- NULL
}
get <- function() x
setsolve <- function(solve) mat_inv <<- solve
getsolve <- function() mat_inv
getevn<- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
mat <- makeCacheMatrix(z)
mat$getsolve()
z_inv <- solve(z)
z_inv
mat$setsolve(z_inv)
mat$getsolve()
mat$getevn()
ls(mat$getevn())
parent.env(mat$getevn())
ls(parent.env(mat$getevn()))
parent.env(mat$getevn())$m
parent.env(mat$getevn())$mat_inv
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(mat)
cache <- cachemean()
cache <- cachemean(matrix)
vec$set(1:10)
ls(parent.env(mat$getevn()))
parent.env(mat$getevn())$x
ls(parent.env(vec$getevn()))
parent.env(vec$getevn())$x
vec$getset()
vec$get()
vec$getmean()
vec$setmean()
vec$setmean(vec$get())
vec$getmean()
vec$setmean(mean(vec$get())
vec$setmean(mean(vec$get())
vec$setmean(mean(vec$get())
vec$setmean(mean(vec$get()))
vec$setmean(mean(vec$get())
vec$setmean(mean(vec$get()))
vec$getmean()
mat$set(z*2)
parent.env(mat$getevn())$x
cacheSolve <- function(x, ...) {
mat_inv <- x$getsolve()
if(!is.null(mat_inv)) {
message("getting cached data")
return(mat_inv)
}
data <- x$getsolve()
mat_inv <- solve(data, ...)
x$setsolve(mat_inv)
mat_inv
}
cacheSolve(z)
cacheSolve(parent.env(mat$getevn())$x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(y)
cachemean()
cachemean(vec)
cacheSolve(mat)
mat$getsolve()
mat$getsolve(z)
z
mat$setsolve(z_inv)
mat_inv
parent.env(mat$getevn())$mat_inv
mat$getsolve()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
mat_inv <- x$getsolve()
if(!is.null(mat_inv)) {
message("getting cached data")
return(mat_inv)
}
data <- x$get()
mat_inv <- solve(data, ...)
x$setsolve(mat_inv)
mat_inv
}
cacheSolve(mat)
cacheSolve(mat)
s <- makeCacheMatrix()
ls()
ls(parent.env(mat$getevn()))
parent.env(vec$getevn())$mat_inv
cacheSolve(mat)
mat_inv
rm(parent.env(vec$getevn())$mat_inv)
ls(parent.env(mat$getevn()))
s <- makeCacheMatrix()
##The function, makeCacheMatrix creates a special "vector", which is really a list containing a function to
## 1 - set the value of the matrix
## 2 - get the value of the matrix
## 3 - set the value of the solve
## 4 - get the value of the solve
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
mat_inv <- NULL
mat_inv
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
mat_inv <<- NULL
}
get <- function() x
setsolve <- function(solve) mat_inv <<- solve
getsolve <- function() mat_inv
getevn<- function() environment()
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve,
getevn = getevn)
}
s <- makeCacheMatrix()
mat$get(z*2)
mat$get()
mat$get()
ls(parent.env(mat$getevn()))
parent.env(vec$getevn())$x
parent.env(mat$getevn())$x
rm()
parent.env(mat$getevn())$x
mat$setsolve()
mat$setsolve(x)
parent.env(mat$getevn())$x
mat$getsolve()
